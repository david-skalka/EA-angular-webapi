# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 6.0.x
    - name: Setup NuGet
      uses: NuGet/setup-nuget@v1
    - name: Restore dependencies
      run: dotnet restore
    - name: Restore NuGet packages
      run: nuget restore EADotnetWebapiAddIn\EADotnetWebapiAddIn.csproj  -SolutionDirectory .
    - name: Build
      run: dotnet build --no-restore
    - name: Test Cli
      run: dotnet test
    - name: Generate a sample project
      shell: pwsh
      run: | 
        $projectName = "DotnetWebapiSample"
        $xmi = "data\\Sample\\SampleModel.xml"
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe initialize-solution -n $projectName -o $projectName
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe initialize-angular -n $projectName -o $projectName
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe entity -x $xmi -n $projectName -o $projectName -e "Product,Comment"
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe db-context -x $xmi -n $projectName -o $projectName -e "Product,Comment"
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe seeder -x $xmi -n $projectName -o $projectName -e "Product,Comment"
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe global-mock-data -x $xmi -n $projectName -o $projectName -e "Product,Comment" -f
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe app-component -x $xmi -n $projectName -o $projectName -e "Product,Comment" -f
        EADotnetWebapiCli/bin/Debug/net6.0/EADotnetWebapiCli.exe app-routes -x $xmi -n $projectName -o $projectName -e "Product,Comment" -f
    - name: Test sample project
      run: dotnet test DotnetWebapiSample/DotnetWebapiSampleIntegrationTest/DotnetWebapiSampleIntegrationTest.csproj
    - name: Update Angular api
      run: npm run update-api
      working-directory: DotnetWebapiSample/DotnetWebapiSampleClient
    - name: Build Storybook sample project
      run: npm run build-storybook  --quiet
      working-directory: DotnetWebapiSample/DotnetWebapiSampleClient
    - name: Install Playwright
      run: npx playwright install --with-deps
      working-directory: DotnetWebapiSample/DotnetWebapiSampleClient
    - name: Serve Storybook and run tests
      run: |
          npx concurrently -k -s first -n "SB,TEST" -c "magenta,blue"  "npx http-server storybook-static --port 6006 --silent" "npx wait-on tcp:6006 && yarn test-storybook"
      working-directory: DotnetWebapiSample/DotnetWebapiSampleClient
    - name: Build Installer
      run: iscc EADotnetWebapiInstaller.iss /F"EADotnetWebapiInstaller" 
      working-directory: EADotnetWebapiInstaller
    - uses: actions/upload-artifact@v4
      with:
        name: Cli
        path: EADotnetWebapiCli/bin/Debug/net6.0/*
    - uses: actions/upload-artifact@v4
      with:
        name: AddIn
        path: EADotnetWebapiAddIn/bin/Debug/*
    - uses: actions/upload-artifact@v4
      with:
        name: Sample
        path: |
          DotnetWebapiSample/**
          !**/bin/**
          !**/obj/**
          !**/node_modules/**
    - uses: actions/upload-artifact@v4
      with:
        name: Installer
        path: |
          EADotnetWebapiInstaller/Output/EADotnetWebapiInstaller.exe


